cmake_minimum_required(VERSION 3.1.3)
set(CMAKE_CONFIGURATION_TYPES "Debug;Release;RelWithDebInfo" CACHE TYPE INTERNAL FORCE)
project("RsJetSuite")

option(ENABLE_LIBRARY "Build the shared library" ON)

#include modules for finding CyAPI
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/Modules/")

cmake_policy(SET CMP0015 OLD)
if(${CMAKE_MAJOR_VERSION} GREATER 2)
    cmake_policy(SET CMP0043 NEW)
endif()

list(FIND CMAKE_CONFIGURATION_TYPES "${CMAKE_BUILD_TYPE}" index)
if (${index} EQUAL -1)
   set(CMAKE_BUILD_TYPE "Release")
endif()

########################################################################
## compiler flags
########################################################################

#C++11 is a required language feature for this project
set(CMAKE_CXX_STANDARD 11)

#is this processor x86? set variable X86
if(CMAKE_SYSTEM_PROCESSOR MATCHES "i686.*|i386.*|x86.*|amd64.*|AMD64.*")
    set(X86 TRUE)
else()
    set(X86 FALSE) 
endif()

if( CMAKE_SIZEOF_VOID_P EQUAL 8 )
    MESSAGE( "64 bit compiler detected" )
    SET( EX_PLATFORM 64 )
    SET( EX_PLATFORM_NAME "x64" )
    set(X64 TRUE) 
else( CMAKE_SIZEOF_VOID_P EQUAL 8 ) 
    MESSAGE( "32 bit compiler detected" )
    SET( EX_PLATFORM 32 )
    SET( EX_PLATFORM_NAME "x86" )
    set(X64 FALSE)
endif( CMAKE_SIZEOF_VOID_P EQUAL 8 )






if (MSVC)
    include_directories(${PROJECT_SOURCE_DIR}/external/msvc)
    add_definitions(-D_CRT_SECURE_NO_WARNINGS)
    
	set( MSVC_MULTITHREAD_COMPILE_FLAGS "/MP")
    set( CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} ${MSVC_MULTITHREAD_COMPILE_FLAGS}" )
#	SET(ENABLE_SIMD_FLAGS "SSE2" CACHE STRING "Set compiler SIMD flags")
	SET(ENABLE_SIMD_FLAGS "none" CACHE STRING "Set compiler SIMD flags")

    SET_PROPERTY(CACHE ENABLE_SIMD_FLAGS PROPERTY STRINGS none SSE2 AVX AVX2) 

	
    if(${ENABLE_SIMD_FLAGS} MATCHES "AVX2")
        add_definitions(/arch:AVX2)
        message(STATUS "Enabling AVX2 instructions")
    elseif(${ENABLE_SIMD_FLAGS} MATCHES "AVX")
        add_definitions(/arch:AVX)
        message(STATUS "Enabling AVX instructions")
    elseif(${ENABLE_SIMD_FLAGS} MATCHES "SSE2")
        add_definitions(/arch:SSE2)
        message(STATUS "Enabling SSE2 instructions")
    endif()
	
endif(MSVC)



########################################################################
# Header and library resources needed to communicate with the device.
# These may be found within the build tree or in an external project.
########################################################################
find_package(SoapySDR CONFIG)

if(WIN32)
    find_package(CyAPI)
    set(USB_FOUND ${CYAPI_FOUND})
    set(USB_INCLUDE_DIRS ${CYAPI_INCLUDE_DIRS})
    set(USB_LIBRARIES ${CYAPI_LIBRARIES} SetupAPI)
elseif(UNIX)
    find_package(libusb-1.0)
    set(USB_FOUND ${LIBUSB_1_FOUND})
    set(USB_INCLUDE_DIRS ${LIBUSB_1_INCLUDE_DIRS})
    set(USB_LIBRARIES ${LIBUSB_1_LIBRARIES})
endif()

set(EXT_INCLUDE_DIRS "${PROJECT_SOURCE_DIR}/external/inc" ${CYAPI_INCLUDE_DIRS} )
set(EXT_INCLUDE_DIRS "${EXT_INCLUDE_DIRS}" 
	"${PROJECT_SOURCE_DIR}/Src"
	 "${PROJECT_SOURCE_DIR}/Src/RsJetUSB")

if(X64)
SET(LIQUID_LIBRARIES "${PROJECT_SOURCE_DIR}/external/lib/liquid/x64/libliquid.lib" CACHE STRING "Liquid-DSP Library")
else()
SET(LIQUID_LIBRARIES "${PROJECT_SOURCE_DIR}/external/lib/liquid/x86/libliquid.lib" CACHE STRING "Liquid-DSP Library")
endif()


########################################################################
## Rsjet suite build
########################################################################
#”казываем директорию с подпроектом, который будет собран как самосто€тельный.
add_subdirectory(Src)
########################################################################
## SoapySDR bindings  driver
########################################################################
add_subdirectory(SoapyRsJet)
#######################################################################
add_subdirectory(ConsoleTest)
#########################################################################
# summary
#########################################################################
include(FeatureSummary)
message(STATUS "")
message(STATUS "######################################################")
message(STATUS "## ${PROJECT_NAME} enabled features")
message(STATUS "######################################################")
feature_summary(WHAT ENABLED_FEATURES)
message(STATUS "######################################################")
message(STATUS "## ${PROJECT_NAME} disabled features")
message(STATUS "######################################################")
feature_summary(WHAT DISABLED_FEATURES)

message(STATUS "LIQUID_LIBRARIES: ${LIQUID_LIBRARIES}")
message(STATUS "EXT_INCLUDE_DIRS: ${EXT_INCLUDE_DIRS}")

