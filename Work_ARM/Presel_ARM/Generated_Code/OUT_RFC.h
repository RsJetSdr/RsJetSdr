/* ###################################################################
**     This component module is generated by Processor Expert. Do not modify it.
**     Filename    : OUT_RFC.h
**     Project     : Presel_ARM
**     Processor   : MK20DX128VLH5
**     Component   : BitsIO_LDD
**     Version     : Component 01.029, Driver 01.05, CPU db: 3.00.000
**     Repository  : Kinetis
**     Compiler    : GNU C Compiler
**     Date/Time   : 2018-12-18, 11:29, # CodeGen: 77
**     Abstract    :
**         The HAL BitsIO component provides a low level API for unified
**         access to general purpose digital input/output 32 pins across
**         various device designs.
**
**         RTOS drivers using HAL BitsIO API are simpler and more
**         portable to various microprocessors.
**     Settings    :
**          Component name                                 : OUT_RFC
**          Port                                           : PTA
**          Pins                                           : 2
**            Pin0                                         : 
**              Pin                                        : PTA12/FTM1_CH0/I2S0_TXD0/FTM1_QD_PHA
**              Pin signal                                 : 
**            Pin1                                         : 
**              Pin                                        : PTA13/LLWU_P4/FTM1_CH1/I2S0_TX_FS/FTM1_QD_PHB
**              Pin signal                                 : 
**          Direction                                      : Output
**          Initialization                                 : 
**            Init. direction                              : Output
**            Init. value                                  : 0
**            Auto initialization                          : yes
**          Safe mode                                      : no
**     Contents    :
**         Init   - LDD_TDeviceData* OUT_RFC_Init(LDD_TUserData *UserDataPtr);
**         PutVal - void OUT_RFC_PutVal(LDD_TDeviceData *DeviceDataPtr, uint32_t Val);
**
**     (c) 2012 by Freescale
** ###################################################################*/
/*!
** @file OUT_RFC.h
** @version 01.05
** @brief
**         The HAL BitsIO component provides a low level API for unified
**         access to general purpose digital input/output 32 pins across
**         various device designs.
**
**         RTOS drivers using HAL BitsIO API are simpler and more
**         portable to various microprocessors.
*/         
/*!
**  @addtogroup OUT_RFC_module OUT_RFC module documentation
**  @{
*/         

#ifndef __OUT_RFC_H
#define __OUT_RFC_H

/* MODULE OUT_RFC. */

/* Include shared modules, which are used for whole project */
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"
/* Include inherited beans */
#include "IO_Map.h"
#include "GPIO_PDD.h"

#include "Cpu.h"

#ifdef __cplusplus
extern "C" {
#endif 



/*! Peripheral base address of a device allocated by the component. This constant can be used directly in PDD macros. */
#define OUT_RFC_PRPH_BASE_ADDRESS  0x400FF000U
  
/*! Device data structure pointer used when auto initialization property is enabled. This constant can be passed as a first parameter to all component's methods. */
#define OUT_RFC_DeviceData  ((LDD_TDeviceData *)PE_LDD_GetDeviceStructure(PE_LDD_COMPONENT_OUT_RFC_ID))

/* Methods configuration constants - generated for all enabled component's methods */
#define OUT_RFC_Init_METHOD_ENABLED    /*!< Init method of the component OUT_RFC is enabled (generated) */
#define OUT_RFC_PutVal_METHOD_ENABLED  /*!< PutVal method of the component OUT_RFC is enabled (generated) */

/* Definition of implementation constants */
#define OUT_RFC_MODULE_BASE_ADDRESS PTA_BASE_PTR /*!< Name of macro used as the base address */
#define OUT_RFC_PORTCONTROL_BASE_ADDRESS PORTA_BASE_PTR /*!< Name of macro used as the base address */
#define OUT_RFC_PORT_MASK 0x3000U      /*!< Mask of the allocated pin from the port */
#define OUT_RFC_PORT_VALID_VALUE_MASK 0x03 /*!< Mask of the allocated pins from the port as the first pin would be zero i.e. valid bits to be set in method PutVal */
#define OUT_RFC_PIN_ALLOC_0_MASK 0x1000 /*!< Mask of the first allocated pin from the port */
#define OUT_RFC_PIN_ALLOC_0_INDEX 12U  /*!< The index of the first allocated pin from the port */



/*
** ===================================================================
**     Method      :  OUT_RFC_Init (component BitsIO_LDD)
*/
/*!
**     @brief
**         This method initializes the associated peripheral(s) and the
**         component internal variables. The method is called
**         automatically as a part of the application initialization
**         code.
**     @param
**         UserDataPtr     - Pointer to the RTOS device
**                           structure. This pointer will be passed to
**                           all events as parameter.
**     @return
**                         - Pointer to the dynamically allocated private
**                           structure or NULL if there was an error.
*/
/* ===================================================================*/
LDD_TDeviceData* OUT_RFC_Init(LDD_TUserData *UserDataPtr);

/*
** ===================================================================
**     Method      :  OUT_RFC_PutVal (component BitsIO_LDD)
*/
/*!
**     @brief
**         Specified value is passed to the Input/Output component. If
**         the direction is [input] saves the value to a memory or a
**         register, this value will be written to the pins after
**         switching to the output mode - using [SetDir(TRUE)] (see
**         [Safe mode] property for limitations). If the direction is
**         [output] it writes the value to the pins. (Method is
**         available only if the Direction = _[output]_ or
**         _[input/output]_).
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by [Init] method.
**     @param
**         Val             - Output value
*/
/* ===================================================================*/
void OUT_RFC_PutVal(LDD_TDeviceData *DeviceDataPtr, uint32_t Val);

/* END OUT_RFC. */

#ifdef __cplusplus
}  /* extern "C" */
#endif 

#endif
/* ifndef __OUT_RFC_H */
/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.5 [05.21]
**     for the Freescale Kinetis series of microcontrollers.
**
** ###################################################################
*/
